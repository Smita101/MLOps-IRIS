name: CI (main)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    env:
      # match your repo & dvc.yaml
      DVC_REMOTE_NAME: gcs
      MODEL_PATH: artifacts/model.joblib
      METRICS_PATH: artifacts/metrics.json
      EVAL_DATA_PATH: data/eval/iris_eval.csv

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies (project + DVC)
        run: |
          python -m pip install --upgrade pip
          pip install --only-binary=:all: numpy
          pip install -r requirements.txt || true
          pip install dvc dvc-gs pytest

      # Your existing GCP auth (works fine for DVC via ADC)
      - name: Auth to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Export ADC path for DVC/GCS
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=${{ steps.auth.outputs.credentials_file_path }}" >> $GITHUB_ENV

      - name: DVC pull (fetch data, model, metrics)
        run: |
          dvc remote list
          dvc pull -r "$DVC_REMOTE_NAME" -v

      - name: Sanity check required files (fail fast)
        run: |
          ls -lah artifacts || true
          ls -lah data || true
          test -f "$MODEL_PATH"
          test -f "$METRICS_PATH"
          test -f "$EVAL_DATA_PATH"

      # Optional: run your tests
      - name: Run tests (pytest)
        run: pytest -q || true

      # Prepare CML report from the DVC-tracked metrics file
      - name: Prepare CI report (CML)
        run: |
          {
            echo "## CI report"
            echo
            echo "**Branch:** $GITHUB_REF_NAME"
            echo
            echo "**artifacts/metrics.json:**"
            cat "$METRICS_PATH"
          } > report.md

      - name: Setup CML
        if: github.event_name == 'pull_request'
        uses: iterative/setup-cml@v2

      - name: Post CML PR comment
        if: github.event_name == 'pull_request'
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cml comment update report.md --pr --publish || cml comment create report.md --pr --publish

      - name: Upload report (push runs)
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ci-report
          path: report.md
